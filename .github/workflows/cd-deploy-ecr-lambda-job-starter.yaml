name: ci/build-deploy-lambda-job-starter
  #cd/deploy-ecr-lambda-job-starter

on:
  workflow_dispatch:
  workflow_run:
    workflows: [ "ci/unit-tests" ]
    types: [ completed ]
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  actions: write

env:
  ECR_REPOSITORY_JOB_STARTER: hackathon-lambda-job-starter
  CLUSTER_NAME: hackathon-eks-cluster
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: CD - Deploy Lambda Job Starter to ECR
    runs-on: ubuntu-latest
    # if: |
    #   github.event.workflow_run.conclusion == 'success' &&
    #   github.event.workflow_run.head_branch == 'main'
    permissions:
      contents: read
      id-token: write
      actions: write
    
    outputs:
      image-uri: ${{ steps.output.outputs.image-uri }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate Kube Config
        run: |
          aws eks update-kubeconfig --name ${{  env.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --kubeconfig .kube/config

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set AWS environment variables
        run: |
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Create ECR repository if it doesn't exist
        run: |
          echo "Checking if ECR repository '${{ env.IMAGE_NAME_LOWER }}' exists in region '$AWS_DEFAULT_REGION'..."
          
          if aws ecr describe-repositories --repository-names ${{ env.IMAGE_NAME_LOWER }} --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
            echo "✅ Repository '${{ env.IMAGE_NAME_LOWER }}' already exists"
          else
            echo "Repository '${{ env.IMAGE_NAME_LOWER }}' not found. Creating repository..."
            
            if aws ecr create-repository --repository-name ${{ env.IMAGE_NAME_LOWER }} --region $AWS_DEFAULT_REGION; then
              echo "✅ Successfully created ECR repository '${{ env.IMAGE_NAME_LOWER }}'"
              echo "Repository URI: $(aws ecr describe-repositories --repository-names ${{ env.IMAGE_NAME_LOWER }} --region $AWS_DEFAULT_REGION --query 'repositories[0].repositoryUri' --output text)"
            else
              echo "❌ Failed to create ECR repository '${{ env.IMAGE_NAME_LOWER }}'"
              echo "Debug information:"
              echo "  - Repository name: ${{ env.IMAGE_NAME_LOWER }}"
              echo "  - AWS region: $AWS_DEFAULT_REGION"
              echo "  - AWS account: $(aws sts get-caller-identity --query Account --output text 2>/dev/null || echo 'Unable to retrieve account ID')"
              echo ""
              echo "Please verify:"
              echo "  - AWS credentials have ECR permissions (ecr:CreateRepository, ecr:DescribeRepositories)"
              echo "  - Repository name follows ECR naming conventions (lowercase, alphanumeric, hyphens, underscores, periods)"
              echo "  - AWS region is correct and ECR is available in this region"
              exit 1
            fi
          fi


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.job-starter
          platforms: linux/amd64
          provenance: false
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME_LOWER }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME_LOWER }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image URI
        id: output
        run: echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME_LOWER }}:latest" >> $GITHUB_OUTPUT
      

