name: ci/build-deploy-lambda-job-starter
  #cd/deploy-ecr-lambda-job-starter

on:
  workflow_dispatch:
  workflow_run:
    workflows: [ "ci/unit-tests" ]
    types: [ completed ]
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  actions: write

env:
  ECR_REPOSITORY_JOB_STARTER: hackathon-lambda-job-starter

jobs:
  build-and-push:
    name: CD - Deploy Lambda Job Starter to ECR
    runs-on: ubuntu-latest
    # if: |
    #   github.event.workflow_run.conclusion == 'success' &&
    #   github.event.workflow_run.head_branch == 'main'
    permissions:
      contents: read
      id-token: write
      actions: write
    
    outputs:
      image-uri: ${{ steps.output.outputs.image-uri }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.job-starter
          platforms: linux/amd64
          provenance: false
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_JOB_STARTER }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_JOB_STARTER }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image URI
        id: output
        run: echo "image-uri=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_JOB_STARTER }}:latest" >> $GITHUB_OUTPUT
      
      - name: Update GitHub Repository Variable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Try to update the variable first, if it fails, create it
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/LAMBDA_JOB_STARTER_IMAGE_URI \
            -d '{"name":"LAMBDA_JOB_STARTER_IMAGE_URI","value":"${{ steps.output.outputs.image-uri }}"}' \
            || \
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables \
            -d '{"name":"LAMBDA_JOB_STARTER_IMAGE_URI","value":"${{ steps.output.outputs.image-uri }}"}'
